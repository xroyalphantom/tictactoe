{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ALL-3\\\\my-app\\\\src\\\\game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Board from \"./board\";\nimport { calculateWinner } from \"./helper\";\n\nconst Game = () => {\n  _s();\n\n  const [history, setHistory] = useState(Array(9).fill(null));\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXisNext] = useState(true);\n  const winner = calculateWinner(history[stepNumber]);\n  const xO = xIsNext ? \"X\" : \"O\"; //turn dependent\n\n  const handleClick = i => {\n    const historyPoint = history.slice(0, stepNumber + 1);\n    const current = historyPoint[stepNumber];\n    const squares = [...current];\n\n    if (winner || squares[i]) //square already occupied or winner already established\n      {\n        return;\n      }\n\n    squares[i] = xO;\n    setHistory([...historyPoint, squares]);\n    setStepNumber(historyPoint.length);\n    setXisNext(!xIsNext);\n  };\n\n  const jumpTo = step => {\n    setStepNumber(step);\n    setXisNext(step % 2 === 0);\n  };\n\n  const renderMoves = () => {\n    history.map((_step, move) => {\n      const destination = move ? `Go to move #${move}` : \"Go to Start\";\n      return;\n\n      /*#__PURE__*/\n      _jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => jumpTo(move),\n          children: destination\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this);\n    });\n  };\n\n  return;\n\n  /*#__PURE__*/\n  _jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Brainpoint Coding Challenge: Tic Tac Toe \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      squares: history[stepNumber],\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this), renderMoves()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: winner ? \"Winner: \" + winner : \"Next Move: \" + xO\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Game, \"yqIZCZFmY6OCObM2Cq8SnLSUb7g=\");\n\n_c = Game;\nexport default game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/ALL-3/my-app/src/game.js"],"names":["React","useState","Board","calculateWinner","Game","history","setHistory","Array","fill","stepNumber","setStepNumber","xIsNext","setXisNext","winner","xO","handleClick","i","historyPoint","slice","current","squares","length","jumpTo","step","renderMoves","map","_step","move","destination","game"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAAQC,eAAR,QAA8B,UAA9B;;AAEA,MAAMC,IAAI,GAAG,MACb;AAAA;;AACI,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAACM,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAtC;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAMY,MAAM,GAAGV,eAAe,CAACE,OAAO,CAACI,UAAD,CAAR,CAA9B;AACA,QAAMK,EAAE,GAAGH,OAAO,GAAG,GAAH,GAAS,GAA3B,CALJ,CAKoC;;AAEhC,QAAMI,WAAW,GAAIC,CAAD,IACpB;AACI,UAAMC,YAAY,GAAGZ,OAAO,CAACa,KAAR,CAAc,CAAd,EAAiBT,UAAU,GAAC,CAA5B,CAArB;AACA,UAAMU,OAAO,GAAGF,YAAY,CAACR,UAAD,CAA5B;AACA,UAAMW,OAAO,GAAG,CAAC,GAAGD,OAAJ,CAAhB;;AAEA,QAAGN,MAAM,IAAIO,OAAO,CAACJ,CAAD,CAApB,EAAyB;AACzB;AACI;AACH;;AACDI,IAAAA,OAAO,CAACJ,CAAD,CAAP,GAAaF,EAAb;AACAR,IAAAA,UAAU,CAAC,CAAC,GAAGW,YAAJ,EAAiBG,OAAjB,CAAD,CAAV;AACAV,IAAAA,aAAa,CAACO,YAAY,CAACI,MAAd,CAAb;AACAT,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACH,GAdD;;AAgBA,QAAMW,MAAM,GAAIC,IAAD,IACf;AACIb,IAAAA,aAAa,CAACa,IAAD,CAAb;AACAX,IAAAA,UAAU,CAACW,IAAI,GAAG,CAAP,KAAa,CAAd,CAAV;AACH,GAJD;;AAMA,QAAMC,WAAW,GAAG,MACpB;AACInB,IAAAA,OAAO,CAACoB,GAAR,CAAY,CAACC,KAAD,EAAOC,IAAP,KACZ;AACI,YAAMC,WAAW,GAAGD,IAAI,GAAI,eAAcA,IAAK,EAAvB,GAA2B,aAAnD;AACA;;AACA;AACI;AAAA,+BACI;AAAQ,UAAA,OAAO,EAAE,MAAML,MAAM,CAACK,IAAD,CAA7B;AAAA,oBAAsCC;AAAtC;AAAA;AAAA;AAAA;AAAA;AADJ,SAASD,IAAT;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH,KATD;AAUH,GAZD;;AAcA;;AACA;AACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,KAAD;AAAO,MAAA,OAAO,EAAEtB,OAAO,CAACI,UAAD,CAAvB;AAAqC,MAAA,OAAO,EAAEM;AAA9C;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACI;AAAA,gCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,EAECS,WAAW,EAFZ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAA,kBAAKX,MAAM,GAAG,aAAaA,MAAhB,GAAyB,gBAAgBC;AAApD;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA,kBADJ;AAaH,CA1DD;;GAAMV,I;;KAAAA,I;AA4DN,eAAeyB,IAAf","sourcesContent":["import React, {useState} from \"react\";\r\nimport Board from \"./board\";\r\nimport {calculateWinner} from \"./helper\";\r\n\r\nconst Game = () =>\r\n{\r\n    const [history, setHistory] = useState(Array(9).fill(null));\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const [xIsNext, setXisNext] = useState(true);\r\n    const winner = calculateWinner(history[stepNumber]);\r\n    const xO = xIsNext ? \"X\" : \"O\"; //turn dependent\r\n\r\n    const handleClick = (i) =>\r\n    {\r\n        const historyPoint = history.slice(0, stepNumber+1);\r\n        const current = historyPoint[stepNumber];\r\n        const squares = [...current];\r\n        \r\n        if(winner || squares[i]) //square already occupied or winner already established\r\n        {\r\n            return;\r\n        }\r\n        squares[i] = xO;\r\n        setHistory([...historyPoint,squares]);\r\n        setStepNumber(historyPoint.length);\r\n        setXisNext(!xIsNext);\r\n    };\r\n\r\n    const jumpTo = (step) =>\r\n    {\r\n        setStepNumber(step);\r\n        setXisNext(step % 2 === 0);\r\n    };\r\n\r\n    const renderMoves = () =>\r\n    {\r\n        history.map((_step,move) =>\r\n        {\r\n            const destination = move ? `Go to move #${move}` : \"Go to Start\";\r\n            return\r\n            (\r\n                <li key={move}>\r\n                    <button onClick={() => jumpTo(move)}>{destination}</button>\r\n                </li>\r\n            );\r\n        });\r\n    };\r\n\r\n    return\r\n    (\r\n        <>\r\n            <h1> Brainpoint Coding Challenge: Tic Tac Toe </h1>\r\n            <Board squares={history[stepNumber]} onClick={handleClick} />\r\n            <div className=\"info-wrapper\">\r\n                <div>\r\n                <h3>History</h3>\r\n                {renderMoves()}\r\n                </div>\r\n                <h3>{winner ? \"Winner: \" + winner : \"Next Move: \" + xO}</h3>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default game;"]},"metadata":{},"sourceType":"module"}