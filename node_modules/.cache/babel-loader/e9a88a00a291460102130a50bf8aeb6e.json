{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ALL-3\\\\my-app\\\\src\\\\game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Board from \"./board\";\nimport { calculateWinner } from \"./winner\";\n\nconst Game = () => {\n  _s();\n\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [xNext, setXNext] = useState(true);\n  const [stepNumber, setStepNumber] = useState(0);\n  const winner = calculateWinner(history[stepNumber]);\n  const turn = xNext ? \"X\" : \"O\"; //turn dependent\n\n  const handleClick = i => {\n    const historyPoint = history.slice(0, stepNumber + 1);\n    const current = historyPoint[stepNumber];\n    const squares = [...current];\n\n    if (winner || squares[i]) //square already occupied or winner already established\n      {\n        return;\n      }\n\n    squares[i] = turn;\n    setHistory([...historyPoint, squares]);\n    setStepNumber(historyPoint.length);\n    setXNext(!xNext);\n  };\n\n  const jumpTo = step => {\n    setStepNumber(step);\n    setXNext(step % 2 === 0);\n  };\n\n  const renderMoves = () => history.map((_step, move) => {\n    const goto = move ? `Move #${move}` : \"Go to Start\";\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: goto\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 19\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this);\n  });\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Brainpoint Coding Challenge: Tic Tac Toe \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      sq: history[stepNumber],\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Past Moves\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this), renderMoves()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: winner ? \"Winner: \" + winner : \"Next Move: \" + turn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Game, \"GNJVaWgo33v0yi2iHVKJHMmp52U=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/ALL-3/my-app/src/game.js"],"names":["React","useState","Board","calculateWinner","Game","history","setHistory","Array","fill","xNext","setXNext","stepNumber","setStepNumber","winner","turn","handleClick","i","historyPoint","slice","current","squares","length","jumpTo","step","renderMoves","map","_step","move","goto"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,eAAT,QAAgC,UAAhC;;AAEA,MAAMC,IAAI,GAAG,MACb;AAAA;;AACI,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,CAACM,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAD,CAAtC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAMY,MAAM,GAAGV,eAAe,CAACE,OAAO,CAACM,UAAD,CAAR,CAA9B;AACA,QAAMG,IAAI,GAAGL,KAAK,GAAG,GAAH,GAAS,GAA3B,CALJ,CAKoC;;AAEhC,QAAMM,WAAW,GAAIC,CAAD,IACpB;AACI,UAAMC,YAAY,GAAGZ,OAAO,CAACa,KAAR,CAAc,CAAd,EAAiBP,UAAU,GAAC,CAA5B,CAArB;AACA,UAAMQ,OAAO,GAAGF,YAAY,CAACN,UAAD,CAA5B;AACA,UAAMS,OAAO,GAAG,CAAC,GAAGD,OAAJ,CAAhB;;AAEA,QAAGN,MAAM,IAAIO,OAAO,CAACJ,CAAD,CAApB,EAAyB;AACzB;AACI;AACH;;AACDI,IAAAA,OAAO,CAACJ,CAAD,CAAP,GAAaF,IAAb;AACAR,IAAAA,UAAU,CAAC,CAAC,GAAGW,YAAJ,EAAiBG,OAAjB,CAAD,CAAV;AACAR,IAAAA,aAAa,CAACK,YAAY,CAACI,MAAd,CAAb;AACAX,IAAAA,QAAQ,CAAC,CAACD,KAAF,CAAR;AACH,GAdD;;AAgBA,QAAMa,MAAM,GAAIC,IAAD,IACf;AACIX,IAAAA,aAAa,CAACW,IAAD,CAAb;AACAb,IAAAA,QAAQ,CAACa,IAAI,GAAG,CAAP,KAAa,CAAd,CAAR;AACH,GAJD;;AAMA,QAAMC,WAAW,GAAG,MAChBnB,OAAO,CAACoB,GAAR,CAAY,CAACC,KAAD,EAAOC,IAAP,KACZ;AACI,UAAMC,IAAI,GAAGD,IAAI,GAAI,SAAQA,IAAK,EAAjB,GAAqB,aAAtC;AACA,wBACI;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAE,MAAML,MAAM,CAACK,IAAD,CAA7B;AAAA,kBAAsCC;AAAtC;AAAA;AAAA;AAAA;AAAA;AADF,OAASD,IAAT;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GARD,CADJ;;AAWA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,KAAD;AAAO,MAAA,EAAE,EAAEtB,OAAO,CAACM,UAAD,CAAlB;AAAgC,MAAA,OAAO,EAAEI;AAAzC;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACI;AAAA,gCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,EAECS,WAAW,EAFZ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAA,kBAAKX,MAAM,GAAG,aAAaA,MAAhB,GAAyB,gBAAgBC;AAApD;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA,kBADJ;AAaH,CAtDD;;GAAMV,I;;KAAAA,I;AAwDN,eAAeA,IAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport Board from \"./board\";\r\nimport { calculateWinner } from \"./winner\";\r\n\r\nconst Game = () =>\r\n{\r\n    const [history, setHistory] = useState([Array(9).fill(null)]);\r\n    const [xNext, setXNext] = useState(true);\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const winner = calculateWinner(history[stepNumber]);\r\n    const turn = xNext ? \"X\" : \"O\"; //turn dependent\r\n\r\n    const handleClick = (i) =>\r\n    {\r\n        const historyPoint = history.slice(0, stepNumber+1);\r\n        const current = historyPoint[stepNumber];\r\n        const squares = [...current];\r\n        \r\n        if(winner || squares[i]) //square already occupied or winner already established\r\n        {\r\n            return;\r\n        }\r\n        squares[i] = turn;\r\n        setHistory([...historyPoint,squares]);\r\n        setStepNumber(historyPoint.length);\r\n        setXNext(!xNext);\r\n    };\r\n\r\n    const jumpTo = (step) =>\r\n    {\r\n        setStepNumber(step);\r\n        setXNext(step % 2 === 0);\r\n    };\r\n\r\n    const renderMoves = () =>\r\n        history.map((_step,move) =>\r\n        {\r\n            const goto = move ? `Move #${move}` : \"Go to Start\";\r\n            return (\r\n                <li key={move}>\r\n                  <button onClick={() => jumpTo(move)}>{goto}</button>\r\n                </li>\r\n            );\r\n        });\r\n    \r\n    return (\r\n        <>\r\n            <h1> Brainpoint Coding Challenge: Tic Tac Toe </h1>\r\n            <Board sq={history[stepNumber]} onClick={handleClick} />\r\n            <div className=\"info-wrapper\">\r\n                <div>\r\n                <h2>Past Moves</h2>\r\n                {renderMoves()}\r\n                </div>\r\n                <h2>{winner ? \"Winner: \" + winner : \"Next Move: \" + turn}</h2>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}